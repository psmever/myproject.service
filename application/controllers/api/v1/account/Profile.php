<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Profile extends SERVICE_Controller {

    private $tokenCheck;
    private $tokenData;
    private $tokenUserUid;

    public function __construct($config = array())
    {
        parent::__construct();

        $this->load->model('User_master_model');
        $this->load->model('User_profile_master_model');
        $this->load->model('User_personal_profile_master_model');
        $this->load->model('Master_model');
        log_message('debug', json_encode($this->post()));

        $this->tokenCheck = parent::getTokenDecodeResult();
        $this->tokenData = parent::getTokenDecodeData();

        if($this->tokenCheck == false) {
            parent::responseErrorOutputMaster(
                '정상 적인 접근이 아닙니다.',
                '406',
                [
                    'token' => '정상적인 토근이 아닙니다.'
                ]
            );
            return;
        }

        $this->load->helper('form');

        $this->tokenUserUid = $this->tokenData->user_uid;
    }

    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }


    public function index_get($params = array())
    {
        parent::responseOutputMaster(
            [
                'api_name' => 'Profile'
            ]
        );
        return;
    }

    private function checkUerUid($user_uid = NULL)
    {

        $selectResult = $this->User_master_model->checkUserUidExits([
            'user_uid' => $user_uid
        ]);

        return $selectResult['status'];
    }

    private function getUserUidBasicInfo($user_uid = NULL)
    {
        return $this->Master_model->getUserBasicInfo([
            'user_uid' => $user_uid
        ]);
    }

    private function updateUserWebSiteIntro($user_uid = NULL, $user_web_site = NULL, $user_intro = NULL)
    {

        $this->User_profile_master_model->updateUserWebSiteIntro($user_uid,[
            'user_web_site' => $user_web_site,
            'user_intro' => $user_intro
        ]);

        return true;
    }

    private function updateUserName($user_uid=NULL, $user_name=NULL)
    {
        if(!$user_uid) return false;

        if($user_name)
        {
            $updateResult = $this->User_master_model->updateUserMasterUserName($user_uid, [
                'user_name' => $user_name
            ]);
            return $updateResult;
        }
    }

    private function getUserPersonalData($user_uid = NULL)
    {
        return $this->User_profile_master_model->getUserPersonalData([
            'user_uid' => $user_uid
        ]);
    }

    private function updateUserPersonalData($user_uid = NULL, $user_phone_number = NULL, $user_address = NULL)
    {
        return $this->User_profile_master_model->updateTable($user_uid, [
            'user_phone_number' => $user_phone_number,
            'user_address' => $user_address
        ]);

    }

    private function insertUserPersonalData( $user_uid = NULL, $user_phone_number = NULL, $user_address = NULL)
    {
        return $this->User_personal_profile_master_model->insertTable([
            'user_uid' => $user_uid,
            'user_phone_number' => $user_phone_number,
            'user_address' => $user_address,
            'state' => 'Y'
        ]);

    }

    private function getUserEmail($user_uid = NULL)
    {
        return $this->User_master_model->getUserEmail([
            'user_uid' => $user_uid
        ]);
    }

    private function updateUserBasicData($user_uid = NULL, $user_gender = NULL, $user_web_site = NULL, $user_intro = NULL, $user_birthday = NULL)
    {
        return $this->User_profile_master_model->updateTable($user_uid, [
            'user_gender' => $user_gender,
            'user_web_site' => getUserProfileWebSiteItem($user_web_site),
            'user_intro' => $user_intro,
            'user_birthday' => $user_birthday,
        ]);

    }

    private function userNameCheck($name = NULL)
    {
        if(empty($name))
        {
            return [
                'result' => false,
                'message' => '이름을 입력해 주세요.'
            ];
        }

        $nameCheckResult = userNameFirstWordCheck($name);
        if ($nameCheckResult == false) {
            return [
                'result' => false,
                'message' => '사용자 이름의 첫글자는 영문이어야 합니다.'
            ];
        }

        $nameCheckResult = userNameValidCheck($name);
        if ($nameCheckResult == false) {
            return [
                'result' => false,
                'message' => '사용자 이름은 영문, 숫자, -, _ 만 사용할 수 있고 3자리 이상 16자리 이하만 사용할수 있습니다.'
            ];
        }

        // 사용자 이름 중복 체크
        $selectResult = $this->User_master_model->checkUserNameExits([
            'user_name' => $name
        ]);
        if($selectResult['status'])
        {
            return [
                'result' => false,
                'message' => '이미 사용중인 사용자 이름입니다.'
            ];
        }

        return [
            'result' => true,
            'message' => '사용할수 있는 이름 입니다.'
        ];

    }


    public function basic_get($params = array())
    {
        $user_uid = trim($this->get('user_uid'));

        if(empty($user_uid))
        {
            parent::responseErrorOutputMaster(
                '사용자 정보가 부족 합니다.'
            );
            return;
        }

        $chechResult = $this->checkUerUid($user_uid);

        if($chechResult == false) {
            parent::responseErrorOutputMaster(
                '존재하지 않는 사용자 입니다.'
            );
            return;
        }

        if(strcmp($this->tokenUserUid, $user_uid))
        {
            parent::responseErrorOutputMaster(
                '본인의 정보가 아닙니다.'
            );
            return;
        }

        $selectResult = $this->getUserUidBasicInfo($user_uid);

        if($selectResult['status'] == true && $selectResult['count'] > 0)
        {
            $birthdayArray = convertBirthNumberToBirthDay($selectResult['data']['user_birthday']);
            parent::responseOutputMaster(
                [
                    "user_uid" => $selectResult['data']['user_uid'],
                    "user_name" => $selectResult['data']['user_name'],
                    "user_gender" => $selectResult['data']['user_gender'],
                    "user_web_site" => $selectResult['data']['user_web_site'],
                    "user_intro" => $selectResult['data']['user_intro'],
                    "user_birth_year" => $birthdayArray['y'],
                    "user_birth_month" => $birthdayArray['m'],
                    "user_birth_day" => $birthdayArray['d'],
                ]
            );
        }
        else
        {
            parent::responseErrorOutputMaster(
                '데이터가 존재 하지 않습니다.'
            );
        }
        return;

    }

    public function basic_post()
    {
        $user_uid = trim($this->post('user_uid'));
        $user_name = trim($this->post('user_name'));
        $user_gender = trim($this->post('user_gender'));
        $user_web_site = trim($this->post('user_web_site'));
        $user_intro = trim($this->post('user_intro'));
        $user_birth_day = trim($this->post('user_birth_day'));
        $user_birth_month = trim($this->post('user_birth_month'));
        $user_birth_year = trim($this->post('user_birth_year'));

        if(empty($user_uid)) {
            parent::responseErrorOutputMaster(
                '사용자 정보가 없습니다.'
            );
            return;
        }

        if(strcmp($this->tokenUserUid, $user_uid))
        {
            parent::responseErrorOutputMaster(
                '본인의 프로필 정보만 수정 할수 있습니다.'
            );
            return;
        }

        $userBasicDataResult = $this->getUserUidBasicInfo($user_uid);
        $nowUser_name = trim($userBasicDataResult['data']['user_name']);

        if(strcmp($nowUser_name, $user_name)) {
            $checkResult = $this->userNameCheck($user_name);
            if($checkResult['result'] == false)
            {
                parent::responseErrorOutputMaster(
                    $checkResult['message']
                );
                return;
            }
        }

        if(empty($user_gender)) {
            parent::responseErrorOutputMaster(
                '성별을 선택해 주세요.'
            );
            return;
        }

        if(empty($user_birth_year) || empty($user_birth_month) || empty($user_birth_day)) {
            parent::responseErrorOutputMaster(
                '정확한 생년월일을 선택해 주세요.'
            );
            return;
        }

        $user_birth = $user_birth_year.$user_birth_month.$user_birth_day;


        if(strcmp($nowUser_name, $user_name))
        {
            $uResult = $this->updateUserName($user_uid, $user_name);
        }

        $this->updateUserBasicData($user_uid, $user_gender, $user_web_site, strip_tags_content($user_intro), $user_birth);


        $selectResult = $this->getUserUidBasicInfo($user_uid);

        parent::responseOutputMaster(
            $selectResult['data'],
            '정상 업데이트 하였습니다.'
        );
        return;

    }


    public function personal_post()
    {
        $user_uid = trim($this->post('user_uid'));
        $user_email = trim($this->post('user_email'));
        $user_phone_number = trim($this->post('user_phone_number'));
        $user_address = trim($this->post('user_address'));

        if(empty($user_uid)) {
            parent::responseErrorOutputMaster(
                '사용자 정보가 없습니다.'
            );
            return;
        }

        if(strcmp($this->tokenUserUid, $user_uid))
        {
            parent::responseErrorOutputMaster(
                '본인의 프로필 정보만 수정 할수 있습니다.'
            );
            return;
        }

        $doResult = $this->updateUserPersonalData($user_uid, getProfilePhoneNumber($user_phone_number), strip_tags_content($user_address));

        if($doResult['status'] == true)
        {
            $userPersonalData = $this->getUserPersonalData($user_uid);
            parent::responseOutputMaster(
                $userPersonalData['data'],
                '정상 수정 하였습니다.'
            );
            return;
        }
        else
        {
            if($doResult['status'] == true)
        {
            parent::responseErrorOutputMaster(
                '수정 실패 했습니다. 잠시후 다시 시도해 주세요.'
            );
            return;
        }
        }

    }

    public function personal_get()
    {
        $user_uid = trim($this->get('user_uid'));

        if(empty($user_uid)) {
            parent::responseErrorOutputMaster(
                '사용자 정보가 없습니다.'
            );
            return;
        }

        $chechResult = $this->checkUerUid($user_uid);

        if($chechResult == false) {
            parent::responseErrorOutputMaster(
                '존재하지 않는 사용자 입니다.'
            );
            return;
        }

        if(strcmp($this->tokenUserUid, $user_uid))
        {
            parent::responseErrorOutputMaster(
                '본인의 정보가 아닙니다.'
            );
            return;
        }

        $getResult = $this->getUserPersonalData($user_uid);

        if($getResult['status'] == true)
        {
            $user_email = $this->getUserEmail($user_uid);
            parent::responseOutputMaster(
                [
                    'user_email' => $user_email['data']['user_email'],
                    'user_photo_number' => $getResult['data']['user_phone_number'],
                    'user_address' => $getResult['data']['user_address'],
                ],
                '정상 전송 하였습니다.'
            );
            return;
        }
        else
        {
            parent::responseErrorOutputMaster(
                '정보가 존재 하지 않습니다.'
            );
            return;
        }
    }

    private function getUserPassword($user_uid = NULL)
    {
        return $this->User_master_model->getUserPassowrd([
            'user_uid' => $user_uid
        ]);

    }

    private function getUserProfileInfo($user_uid = NULL)
    {
        return $this->Master_model->getUserProfileInfo([
            'user_uid' => $user_uid
        ]);

    }

    //사용자 마지막 로그인 시간
    private function getUserLasterLoginDate($user_uid = NULL)
    {
        return $this->Master_model->getUserLastLoginDate([
            'user_uid' => $user_uid,
            'client_type' => parent::getClientType()
        ]);

    }


    public function password_post()
    {
        $user_uid = trim($this->post('user_uid'));
        $now_password = trim($this->post('now_password'));
        $new_password = trim($this->post('new_password'));
        $new_repassword = trim($this->post('new_repassword'));


        if(empty($user_uid))
        {
            parent::responseErrorOutputMaster(
                '사용자 정보가 없습니다.'
            );
            return;
        }

        if(strcmp($this->tokenUserUid, $user_uid))
        {
            parent::responseErrorOutputMaster(
                '본인의 정보가 아닙니다.'
            );
            return;
        }

        if(empty($now_password))
        {
            parent::responseErrorOutputMaster(
                '기존 비밀번호를 입력해 주세요.'
            );
            return;
        }

        $getResult = $this->getUserPassword($user_uid);
        if($getResult['status'] == false || $getResult['count'] == 0) {
            parent::responseErrorOutputMaster(
                '존재하지 않는 사용자 입니다.'
            );
            return;
        }

        if(!getPasswordVerify($now_password, $getResult['data']['user_password']))
        {
            parent::responseErrorOutputMaster(
                '기존 비밀번호가 일치 하지 않습니다.'
            );
            return;
        }

        if(empty($new_password))
        {
            parent::responseErrorOutputMaster(
                '새 비밀 번호를 입력해 주세요.'
            );
            return;
        }

        if(!strcmp($now_password, $new_password))
        {
            parent::responseErrorOutputMaster(
                '새 비밀 번호는 기존 비밀번호와 달라야 합니다.'
            );
            return;
        }

        if(!userPasswordValidCheck($new_password))
        {
            parent::responseErrorOutputMaster(
                '패스워드는 영대/소문자, 숫자 및 특수문자 조합 비밀번호 8자리이상 15자리 이하를 입력 하셔야 합니다.'
            );
            return;
        }

        if(empty($new_repassword))
        {
            parent::responseErrorOutputMaster(
                '새비밀 번호 확인을 입력해 주세요.'
            );
            return;
        }

        if($new_password !== $new_repassword)
        {
            parent::responseErrorOutputMaster(
                '새비밀 번호와 비밀번호 확인은 같아야 합니다.'
            );
            return;
        }

        $updateResult = $this->User_master_model->updateUserPassword([
            'user_uid' => $user_uid,
            'user_password' => getPasswordHash($new_password)
        ]);

        if($updateResult['status'] == true)
        {
            parent::responseOutputMaster(
                [
                    'user_uid' => $user_uid,
                ],
                '비밀번호 수정 성공 했습니다. 다시 로그인해 주세요.'
            );
        }
        else
        {
            parent::responseErrorOutputMaster(
                '수정 실패 했습니다. 잠시후 다시 시도해 주세요.'
            );
            return;
        }
    }

    public function myhome_get()
    {
        $user_uid = trim($this->get('user_uid'));

        if(empty($user_uid))
        {
            parent::responseErrorOutputMaster(
                '사용자 정보가 없습니다.'
            );
            return;
        }

        if(strcmp($this->tokenUserUid, $user_uid))
        {
            parent::responseErrorOutputMaster(
                '본인의 정보가 아닙니다.'
            );
            return;
        }

        $getResult = $this->getUserProfileInfo($user_uid);

        $getLastLoginDate = $this->getUserLasterLoginDate($user_uid);

        if($getResult['status'] == false && $getResult['count'] == 0)
        {
            parent::responseErrorOutputMaster(
                '정보가 존재 하지 않습니다.'
            );
            return;
        }
        else
        {

        	$userData = $getResult['data'];
        	
            $userUid = ( isset($userData['user_uid']) && $userData['user_uid'] ) ? trim($userData['user_uid']) : '';
            $userName = ( isset($userData['user_name']) && $userData['user_name'] ) ? trim($userData['user_name']) : '';
            $userBirthday = ( isset($userData['user_birthday']) && $userData['user_birthday'] ) ? trim(convertBirthNumberToBirthDayType1($userData['user_birthday'])) : '생일을 선택해 주세요.';
            $userGender = ( isset($userData['user_gender']) && $userData['user_gender'] ) ? trim($userData['user_gender']) : '성별을 선택해 주세요.';
            $userGenderName = ( isset($userData['user_gender_name']) && $userData['user_gender_name'] ) ? trim($userData['user_gender_name']) : '성별을 선택해주세요.';
            $userWebSite = ( isset($userData['user_web_site']) && $userData['user_web_site'] ) ? trim($userData['user_web_site']) : '';
            $userEmail = ( isset($userData['user_email']) && $userData['user_email'] ) ? trim($userData['user_email']) : '';
            $userPhoneNumber = ( isset($userData['user_phone_number']) && $userData['user_phone_number'] ) ? telNumberAddHyphen($userData['user_phone_number']) : '전화 번호를 입력해 주세요.';
            $userAddress = ( isset($userData['user_address']) && $userData['user_address'] ) ? trim($userData['user_address']) : '주소를 입력해 주세요.';
            $userIntro = ( isset($userData['user_intro']) && $userData['user_intro'] ) ? trim($userData['user_intro']) : '소개를 입력해 주세요.';
            $registDate = ( isset($userData['regist_date']) && $userData['regist_date'] ) ? trim($userData['regist_date']) : '';
            $registDateType2 = ( isset($userData['regist_date']) && $userData['regist_date'] ) ? trim(convertMysqlDateTimeType2($userData['regist_date'])) : '';
            $lastLoginDate = ( isset($getLastLoginDate['data']['regist_date']) && $getLastLoginDate['data']['regist_date'] ) ? trim($getLastLoginDate['data']['regist_date']) : '';
            $lastLoginDateString = ( isset($getLastLoginDate['data']['regist_date']) && $getLastLoginDate['data']['regist_date'] ) ? trim(convertTimeToString(convertMysqlDateTimeType1($getLastLoginDate['data']['regist_date']))) : '';
            
	        $profileImage = ( isset($userData['profile_image_name']) && $userData['profile_image_name']) ? SITE_PROFILE_IMAGE_URL.'/'.$user_uid.'/'.trim($userData['profile_image_name']) : SITE_DEFAULT_PROFILE_IMAGE_URL;

            parent::responseOutputMaster(
                [
                    'user_uid' => $userUid,
                    'user_name' => $userName,
                    'user_birthday' => $userBirthday,
                    'user_gender' => $userGender,
                    'user_gender_code_name' => $userGenderName,
                    'user_web_site' => $userWebSite,
                    'user_email' => $userEmail,
                    'user_phone_number' => $userPhoneNumber,
                    'user_address' => $userAddress,
                    'user_intro' => $userIntro,
                    'regist_date' => $registDate,
                    'regist_date_type2' => $registDateType2,
                    'last_login_date' => $lastLoginDate,
                    'last_login_date_string' => $lastLoginDateString,
	                'profile_image' => $profileImage,
                ]
            );
        }
    }
}