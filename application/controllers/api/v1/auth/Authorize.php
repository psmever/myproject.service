<?php defined('BASEPATH') OR exit('No direct script access allowed');

class Authorize extends SERVICE_Controller {

    public function __construct($config = array())
    {
        parent::__construct();

        $this->load->model('User_master_model');
        $this->load->model('Master_model');
        $this->load->model('User_email_auth_master_model');
        $this->load->model('User_token_master_model');
        $this->load->model('User_profile_master_model');

        log_message('debug', json_encode($this->post()));

    }

    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }

    public function test_get()
    {
        parent::responseOutputMaster(
            [
                'API NAME' => 'Authorize'
            ]
        );
        return;
    }

    public function index_get($params = array())
    {
        parent::responseOutputMaster(
            [
                'API NAME' => 'Authorize'
            ]
        );
        return;
    }

    function userEmailCheck($email = NULL)
    {
        if(empty($email))
        {
            return [
                'result' => false,
                'message' => '이메일을 입력해 주세요.'
            ];
        }

        // 이메일 타입 확인
        $checkResult = userEmailValidCheck($email);

        if ($checkResult == false)
        {
            return [
                'result' => false,
                'message' => '정상적인 이메일을 입력해 주세요.'
            ];
        }

        // 사용중인 이메일 체크
        $selectResult = $this->User_master_model->checkEmailExits([
            'user_email' => $email
        ]);
        if($selectResult['status'])
        {
            return [
                'result' => false,
                'message' => '이미 사용중인 이메일 주소 입니다.'
            ];
            return;
        }

        return [
            'result' => true,
            'message' => '사용할수 있는 이메일 주소 입니다.'
        ];
        return;
    }

    function userNameCheck($name = NULL)
    {
        if(empty($name))
        {
            return [
                'result' => false,
                'message' => '이름을 입력해 주세요.'
            ];
        }

        $nameCheckResult = userNameFirstWordCheck($name);
        if ($nameCheckResult == false) {
            return [
                'result' => false,
                'message' => '사용자 이름의 첫글자는 영문이어야 합니다.'
            ];
        }

        $nameCheckResult = userNameValidCheck($name);
        if ($nameCheckResult == false) {
            return [
                'result' => false,
                'message' => '사용자 이름은 영문, 숫자, -, _ 만 사용할 수 있고 3자리 이상 16자리 이하만 사용할수 있습니다.'
            ];
        }

        // 사용자 이름 중복 체크
        $selectResult = $this->User_master_model->checkUserNameExits([
            'user_name' => $name
        ]);
        if($selectResult['status'])
        {
            return [
                'result' => false,
                'message' => '이미 사용중인 사용자 이름입니다.'
            ];
        }

        return [
            'result' => true,
            'message' => '사용할수 있는 이름 입니다.'
        ];

    }

    function userPasswordOneCheck($password = NULL)
    {
        if(empty($password))
        {
            return [
                'result' => false,
                'message' => '비밀 번호를 입력해 주세요.'
            ];
        }

        if(!userPasswordValidCheck($password))
        {
            return [
                'result' => false,
                'message' => '패스워드는 영대/소문자, 숫자 및 특수문자 조합 비밀번호 8자리이상 15자리 이하를 입력 하셔야 합니다.'
            ];
        }

        return [
            'result' => true,
            'message' => '사용 가능한 비밀 번호 입니다.'
        ];
    }

    function userPasswordCheck($password = NULL, $rep_password = NULL)
    {
        if(empty($password))
        {
            return [
                'result' => false,
                'message' => '비밀 번호를 입력해 주세요.'
            ];
        }

        if(!userPasswordValidCheck($password))
        {
            return [
                'result' => false,
                'message' => '패스워드는 영대/소문자, 숫자 및 특수문자 조합 비밀번호 8자리이상 15자리 이하를 입력 하셔야 합니다.'
            ];
        }

        if(empty($rep_password))
        {
            return [
                'result' => false,
                'message' => '비밀 번호 확인을 입력해 주세요.'
            ];
        }

        if(strcmp($password, $rep_password))
        {
            return [
                'result' => false,
                'message' => '같은 비밀 번호를 입력해 주세요.'
            ];
        }

        return [
            'result' => true,
            'message' => '사용 가능한 비밀 번호 입니다.'
        ];
    }

    public function register_user_emailcheck_post()
    {
        $register_useremail = trim($this->post('register_useremail'));

        $checkResult = $this->userEmailCheck($register_useremail);

        if($checkResult['result'] == false)
        {
            parent::responseErrorOutputMaster(
                $checkResult['message'],
                '409'
            );
            return;

        }
        else
        {
            parent::responseOutputMaster(
                '',
                $checkResult['message']
            );
            return;
        }

    }

    public function register_user_namecheck_post()
    {
        $register_username = trim($this->post('register_username'));

        $checkResult = $this->userNameCheck($register_username);

        if($checkResult['result'] == false)
        {
            parent::responseOutputMaster(
                $checkResult['message']
            );
            return;
        }
        else
        {
            parent::responseOutputMaster(
                '',
                $checkResult['message']
            );
            return;
        }


    }

    public function register_user_passwordcheck_post()
    {
        $register_password = trim($this->post('register_password'));
        $register_repassword = trim($this->post('register_repassword'));

        $checkResult = $this->userPasswordCheck($register_password,$register_repassword);

        if($checkResult['result'] == false)
        {
            parent::responseErrorOutputMaster(
                $checkResult['message']
            );
            return;
        }
        else
        {
            parent::responseOutputMaster(
                NULL,
                $checkResult['message']
            );
            return;
        }

    }

    public function register_post()
    {

		$register_useremail = trim($this->post('register_useremail'));
		$register_username = trim($this->post('register_username'));
		$register_password = trim($this->post('register_password'));


        $checkResult = $this->userEmailCheck($register_useremail);
        if($checkResult['result'] == false)
        {
            parent::responseErrorOutputMaster(
                $checkResult['message']
            );
            return;
        }

        $checkResult = $this->userNameCheck($register_username);
        if($checkResult['result'] == false)
        {
            parent::responseErrorOutputMaster(
                $checkResult['message']
            );
            return;
        }

        $checkResult = $this->userPasswordOneCheck($register_password);
        if($checkResult['result'] == false)
        {
            parent::responseErrorOutputMaster(
                $checkResult['message']
            );
            return;
        }

        $newUserUID = getRandomUserUid();

        // 사용자 등록
        $insertResult = $this->User_master_model->insertUserMaster([
            'user_uid' => $newUserUID,
            'user_type' => parent::getClientUserType(),
            'user_level' => USER_DEFAULT_LEVEL_CODE,
            'user_email' => $register_useremail,
            'user_name' => $register_username,
            'user_password' => getPasswordHash($register_password),
        ]);

        if($insertResult['status'])
        {
            $this->Master_model->insertRegisterIpLog([
                'user_uid' => $newUserUID,
                'ip_address' => $this->input->ip_address(),
            ]);

            $this->User_profile_master_model->insertUserProfileMaster([
                'user_uid' => $newUserUID
            ]);

            $emailAuthCode = getRandomString(100);
            $this->User_email_auth_master_model->insertUserEmailAuthMaster([
                'user_uid' => $newUserUID,
                'auth_code' =>$emailAuthCode,
            ]);

            // 이메일 인증 보내는...
            // $this->util->sendRegisterVerifyEmail($register_useremail,$emailAuthCode);

            parent::responseOutputMaster(
                '',
                '등록 성공했습니다. 이메일을 확인해 주세요.'
            );
            return;

        }
        else
        {
            parent::responseErrorOutputMaster(
                '등록에 실패 했습니다. 잠시후 다시 시도해 주세요.'
            );
            return;
        }
    }

    public function login_post()
    {
        $login_email = trim($this->post('login_email'));
        $login_password = trim($this->post('login_password'));

        if(empty($login_email))
        {
            parent::responseErrorOutputMaster(
                '이메일을 입력해 주세요.'
            );
            return;
        }

        if(empty($login_password))
        {
            parent::responseErrorOutputMaster(
                '패스워드를 입력해 주세요.'
            );
            return;
        }


        $selectResult = $this->User_master_model->selectEmailToUserMaster([
            'user_email' => $login_email
        ]);

        if($selectResult['count'] == 0)
        {
            parent::responseErrorOutputMaster(
                '존재 하지 않는 사용자 입니다.'
            );
            return;
        }

        $selectResultData = $selectResult['data'];

        $select_user_uid = trim($selectResultData['user_uid']);
        $select_user_password = trim($selectResultData['user_password']);
        $select_user_email = trim($selectResultData['user_email']);
        $select_user_level = trim($selectResultData['user_level']);
        $select_state = trim($selectResultData['state']);
        $select_profile_state = trim($selectResultData['profile_state']);
        $select_email_check = trim($selectResultData['email_check']);
        $select_user_type = trim($selectResultData['user_type']);

        if($select_email_check == 'N')
        {
            parent::responseErrorOutputMaster(
                '이메일을 확인해 주세요.'
            );
            return;
        }

        if($select_state == 'N')
        {
            parent::responseErrorOutputMaster(
                '정상적인 회원이 아닙니다.'
            );
            return;
        }

        if(!getPasswordVerify($login_password, $select_user_password))
        {
            parent::responseErrorOutputMaster(
                '비밀 번호를 확인해 주세요.'
            );
            return;
        }


        $this->load->library(
            'authorization',
            [
                'user_uid' => $select_user_uid,
                'client_type' => parent::getClientType(),
            ]
        );

        $this->authorization->initNewUserLoginToken();
        $this->authorization->initNewAccessToken();

        $accessToken = $this->authorization->getNewAccessToken();
        $userLoginToken = $this->authorization->getUserLoginToken();

        $this->Master_model->insertUserLoginLog([
            'user_uid' => $select_user_uid,
            'client_type' => parent::getClientType(),
            'user_token' => $userLoginToken,
            'access_token' => $accessToken,
            'ip_address' => $this->input->ip_address()
        ]);

        parent::responseOutputMaster(
            [
                'user_profile_state' => ($select_profile_state == 'Y') ? true : false,
                'access_token' => $accessToken,
                'user_uid' => $select_user_uid,
            ],
            '로그인이 완료 되었습니다.'
        );
        return;
    }

}
